{"name": "test_server_snap[case_data0]", "status": "failed", "statusDetails": {"message": "AssertionError: http状态码错误！\n 404 != 202", "trace": "self = <testcase.test_11_delete_server_snap.Test_Server_Snap object at 0x043BC750>\ncase_data = {'address': '/v2/images/${server}$', 'check': [{'check_type': 'only_check_status', 'datebase': None, 'expected_code': ...file': False, 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': 'cf7f02f0db874400b7b4457670d731c4'}, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"])\n    @allure.story(\"虚拟机快照\")\n    @pytest.mark.flaky(reruns=3)\n    def test_server_snap(self,case_data):\n    \n        for k, v in enumerate(case_dict[\"test_case\"]):  # 遍历用例文件中所有用例的索引和值\n            try:\n                if case_data == v:\n                    # 修改方法的__doc__在下一次调用时生效，此为展示在报告中的用例描述\n                    Test_Server_Snap.test_server_snap.__doc__ = case_dict[\"test_case\"][k + 1][\"info\"]\n            except IndexError:\n                pass\n    \n        # if not self.result[\"result\"]:\n        #     # 查看类变量result的值，如果未False，则前一接口校验错误，此接口标记未失败，节约测试时间\n        #     pytest.xfail(\"前置接口测试失败，此接口标记为失败\")\n    \n        time.sleep(case_data[\"sleep_time\"])\n        #send_request(_data, _host, _address,_port, _relevance, path, _success)\n        code, data = requestSend.send_request(case_data, case_dict[\"testinfo\"].get(\"host\"),\n                                              case_dict[\"testinfo\"].get(\"address\"),str(case_dict[\"testinfo\"].get(\"port\")), self.relevance, CASE_PATH, self.result)\n    \n        CheckResult.check(case_data[\"test_name\"], case_data[\"check\"][0], code, data, self.relevance, CASE_PATH,\n>                         self.result)\n\ntestcase\\test_11_delete_server_snap.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntest_name = '删除虚拟机快照'\ncase_data = {'check_type': 'only_check_status', 'datebase': None, 'expected_code': 202, 'expected_request': {}}\ncode = 404, data = ''\nrelevance = {'admin_id': 'f42a1487dd4e4a6baab6eb65f50f8db0', 'admin_role_id': 'f8d49cf5c0d74f7b85c462219b300f78', 'description': 'api_auto_lI3xjf7nRH', 'flavor_id': 'flavor-1-1-1', ...}\n_path = 'H:\\\\api_auto_test\\\\Params\\\\Param', success = {'result': False}\n\n    def check(test_name, case_data, code, data, relevance, _path, success):\n        \"\"\"\n        校验测试结果\n        :param test_name:  测试用例\n        :param case_data:  测试用例\n        :param code:  HTTP状态\n        :param data:  返回的接口json数据\n        :param relevance:  关联值对象\n        :param _path:  case路径\n        :param success:  全局测试结果\n        :return:\n        \"\"\"\n        # 不校验\n        if case_data[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n    \n        # 校验json格式\n        elif case_data[\"check_type\"] == 'json':\n            expected_request = case_data[\"expected_request\"]\n            # 判断预期结果格式，如果是字符串，则打开文件路径，提取保存在文件中的期望结果\n            if isinstance(case_data[\"expected_request\"], str):\n                    expected_request = expectedManage.read_json(test_name, expected_request, relevance, _path, success)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(\"期望code\", str(case_data[\"expected_code\"]))\n                allure.attach('期望data', str(expected_request))\n                allure.attach(\"实际code\", str(code))\n                allure.attach('实际data', str(data))\n            if int(code) == case_data[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                # json校验\n                CheckJson.check_json(expected_request, data, success)\n            else:\n                success[\"result\"] = False\n                if case_data.get(\"CustomFail\"):\n                    info = CustomFail.custom_manage(case_data.get(\"CustomFail\"), relevance)\n                    raise failureException(str(info)+\"\\nhttp状态码错误！\\n %s != %s\" % (code, case_data[\"expected_code\"]))\n                else:\n                    raise failureException(\"http状态码错误！\\n %s != %s\" % (code, case_data[\"expected_code\"]))\n    \n        # 只校验HTTP状态\n        elif case_data[\"check_type\"] == 'only_check_status':\n            with allure.step(\"校验HTTP状态\"):\n                allure.attach(\"期望code\", str(case_data[\"expected_code\"]))\n                allure.attach(\"实际code\", str(code))\n            if int(code) == case_data[\"expected_code\"]:\n                pass\n            else:\n                success[\"result\"] = False\n                if case_data.get(\"CustomFail\"):\n                    info = CustomFail.custom_manage(case_data.get(\"CustomFail\"), relevance)\n                    raise failureException(str(info)+\"\\nhttp状态码错误！\\n %s != %s\" % (code, case_data[\"expected_code\"]))\n                else:\n>                   raise failureException(\"http状态码错误！\\n %s != %s\" % (code, case_data[\"expected_code\"]))\nE                   AssertionError: http状态码错误！\nE                    404 != 202\n\nCommon\\CheckResult.py:71: AssertionError"}, "description": "删除虚拟机快照后查看询", "steps": [{"name": "DELETE请求接口", "status": "passed", "attachments": [{"name": "删除虚拟机快照", "source": "d0625528-2c44-4318-a993-f7d862c641cb-attachment.attach"}, {"name": "http://192.168.54.103:9292/v2/images/${server}$", "source": "f365149e-c9db-4443-90e9-a344a4579107-attachment.attach"}, {"name": "{'Content-Type': 'application/json', 'X-Auth-Token': 'cf7f02f0db874400b7b4457670d731c4'}", "source": "4a43e6c6-29ce-43b6-ab61-e3a2a83d9c39-attachment.attach"}, {"name": "{'volume': {'size': 1, 'name': 'volume_3ltfgIUrk9OhdvSsineZ'}}", "source": "cd202db1-a742-4a60-ab48-bed3a3a3ca8a-attachment.attach"}], "start": 1572789566284, "stop": 1572789566286}, {"name": "校验HTTP状态", "status": "passed", "attachments": [{"name": "202", "source": "76533e30-8420-4c8b-95cc-3733c6a03bd4-attachment.attach"}, {"name": "404", "source": "a85ba402-ad9b-45d1-b2a8-cd364cd26ff2-attachment.attach"}], "start": 1572789566448, "stop": 1572789566450}], "attachments": [{"name": "log", "source": "e721f2d2-8ba5-4d87-9b89-6335720a90bf-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_data", "value": "{'test_name': '删除虚拟机快照', 'info': '删除虚拟机快照', 'http_type': 'http', 'request_type': 'delete', 'parameter_type': 'raw', 'address': '/v2/images/${server}$', 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': 'cf7f02f0db874400b7b4457670d731c4'}, 'timeout': 20, 'sleep_time': 0, 'parameter': {'volume': {'size': 1, 'name': 'volume_3ltfgIUrk9OhdvSsineZ'}}, 'file': False, 'check': [{'check_type': 'only_check_status', 'datebase': None, 'expected_code': 202, 'expected_request': {}}], 'relevance': None}"}], "start": 1572789566281, "stop": 1572789566450, "uuid": "f1ddc7fa-963a-4f29-86a1-d34ad277c660", "historyId": "f04319492a13d975aa68bd929faf8bc0", "testCaseId": "f679d27218731e5f7a34303a45b398ca", "fullName": "testcase.test_11_delete_server_snap.Test_Server_Snap#test_server_snap", "labels": [{"name": "feature", "value": "删除虚拟机快照"}, {"name": "story", "value": "虚拟机快照"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_11_delete_server_snap"}, {"name": "subSuite", "value": "Test_Server_Snap"}, {"name": "host", "value": "wuzs"}, {"name": "thread", "value": "13404-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_11_delete_server_snap"}]}