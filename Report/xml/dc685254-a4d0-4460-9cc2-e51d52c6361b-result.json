{"name": "test_delete_volume[case_data0]", "status": "failed", "statusDetails": {"message": "AssertionError: http状态码错误！\n 400 != 202", "trace": "self = <testcase.test_15_delete_volume.Test_Delete_volume object at 0x00B11770>\ncase_data = {'address': '/v2/${project_id}$/volumes/${volume_id}$', 'check': [{'check_type': 'only_check_status', 'datebase': None...file': False, 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': 'a47b4241cae349a890f80687150ce3b4'}, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"])\n    @allure.story(\"卷\")\n    # @pytest.mark.scenarios_3(1)\n    def test_delete_volume(self,case_data):\n    \n        # 参数化修改test_add_project 注释\n        for k, v in enumerate(case_dict[\"test_case\"]):  # 遍历用例文件中所有用例的索引和值\n            try:\n                if case_data == v:\n                    # 修改方法的__doc__在下一次调用时生效，此为展示在报告中的用例描述\n                    Test_Delete_volume.test_delete_volume.__doc__ = case_dict[\"test_case\"][k + 1][\"info\"]\n            except IndexError:\n                pass\n    \n        if not self.result[\"result\"]:\n            # 查看类变量result的值，如果未False，则前一接口校验错误，此接口标记未失败，节约测试时间\n            pytest.xfail(\"前置接口测试失败，此接口标记为失败\")\n    \n        time.sleep(case_data[\"sleep_time\"])\n    \n        #send_request(_data, _host, _address,_port, _relevance, path, _success)\n        code, data = requestSend.send_request(case_data, case_dict[\"testinfo\"].get(\"host\"),\n                                              case_dict[\"testinfo\"].get(\"address\"),str(case_dict[\"testinfo\"].get(\"port\")), self.relevance, CASE_PATH, self.result)\n    \n        CheckResult.check(case_data[\"test_name\"], case_data[\"check\"][0], code, data, self.relevance, CASE_PATH,\n>                         self.result)\n\ntestcase\\test_15_delete_volume.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntest_name = '删除卷'\ncase_data = {'check_type': 'only_check_status', 'datebase': None, 'expected_code': 202, 'expected_request': {}}\ncode = 400\ndata = {'badRequest': {'code': 400, 'message': 'Invalid volume: Volume still has 1 dependent snapshots.'}}\nrelevance = {'admin_id': 'f42a1487dd4e4a6baab6eb65f50f8db0', 'admin_role_id': 'f8d49cf5c0d74f7b85c462219b300f78', 'description': 'api_auto_Nqn4CTaDRQ', 'flavor_id': 'flavor-1-1-1', ...}\n_path = 'H:\\\\api_auto_test\\\\Params\\\\Param', success = {'result': False}\n\n    def check(test_name, case_data, code, data, relevance, _path, success):\n        \"\"\"\n        校验测试结果\n        :param test_name:  测试用例\n        :param case_data:  测试用例\n        :param code:  HTTP状态\n        :param data:  返回的接口json数据\n        :param relevance:  关联值对象\n        :param _path:  case路径\n        :param success:  全局测试结果\n        :return:\n        \"\"\"\n        # 不校验\n        if case_data[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n    \n        # 校验json格式\n        elif case_data[\"check_type\"] == 'json':\n            expected_request = case_data[\"expected_request\"]\n            # 判断预期结果格式，如果是字符串，则打开文件路径，提取保存在文件中的期望结果\n            if isinstance(case_data[\"expected_request\"], str):\n                    expected_request = expectedManage.read_json(test_name, expected_request, relevance, _path, success)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(\"期望code\", str(case_data[\"expected_code\"]))\n                allure.attach('期望data', str(expected_request))\n                allure.attach(\"实际code\", str(code))\n                allure.attach('实际data', str(data))\n            if int(code) == case_data[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                # json校验\n                CheckJson.check_json(expected_request, data, success)\n            else:\n                success[\"result\"] = False\n                if case_data.get(\"CustomFail\"):\n                    info = CustomFail.custom_manage(case_data.get(\"CustomFail\"), relevance)\n                    raise failureException(str(info)+\"\\nhttp状态码错误！\\n %s != %s\" % (code, case_data[\"expected_code\"]))\n                else:\n                    raise failureException(\"http状态码错误！\\n %s != %s\" % (code, case_data[\"expected_code\"]))\n    \n        # 只校验HTTP状态\n        elif case_data[\"check_type\"] == 'only_check_status':\n            with allure.step(\"校验HTTP状态\"):\n                allure.attach(\"期望code\", str(case_data[\"expected_code\"]))\n                allure.attach(\"实际code\", str(code))\n            if int(code) == case_data[\"expected_code\"]:\n                pass\n            else:\n                success[\"result\"] = False\n                if case_data.get(\"CustomFail\"):\n                    info = CustomFail.custom_manage(case_data.get(\"CustomFail\"), relevance)\n                    raise failureException(str(info)+\"\\nhttp状态码错误！\\n %s != %s\" % (code, case_data[\"expected_code\"]))\n                else:\n>                   raise failureException(\"http状态码错误！\\n %s != %s\" % (code, case_data[\"expected_code\"]))\nE                   AssertionError: http状态码错误！\nE                    400 != 202\n\nCommon\\CheckResult.py:71: AssertionError"}, "steps": [{"name": "DELETE请求接口", "status": "passed", "attachments": [{"name": "删除卷", "source": "533bb98d-1a7d-4287-a5e2-65d67c70bdfe-attachment.attach"}, {"name": "http://192.168.54.103:8776/v2/c9aad29894b84640927e9765b528e0e1/volumes/857d1f3b-1d27-4873-803c-a6ebbeadfd1b", "source": "78396056-9440-4b9d-9428-ae4a3516c2a5-attachment.attach"}, {"name": "{'Content-Type': 'application/json', 'X-Auth-Token': 'a47b4241cae349a890f80687150ce3b4'}", "source": "b9c60661-0377-468e-8d56-6e3cfada52e1-attachment.attach"}, {"name": "{'volume': {'size': 1, 'name': 'volume_7hl2eX5WHDBuf4ZjmItJ'}}", "source": "12a97464-5178-463c-a59a-698cda44fb1e-attachment.attach"}], "start": 1572790408744, "stop": 1572790408747}, {"name": "校验HTTP状态", "status": "passed", "attachments": [{"name": "202", "source": "a690ebde-8bfb-4dfd-a84a-a09c28f50efd-attachment.attach"}, {"name": "400", "source": "d03cbeba-8d23-4b75-ba9d-301a8c63c600-attachment.attach"}], "start": 1572790408959, "stop": 1572790408960}], "attachments": [{"name": "log", "source": "8729d7b9-adb3-4a03-b820-468910d528b9-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_data", "value": "{'test_name': '删除卷', 'info': '删除卷', 'http_type': 'http', 'request_type': 'delete', 'parameter_type': 'raw', 'address': '/v2/${project_id}$/volumes/${volume_id}$', 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': '${token_id}$'}, 'timeout': 20, 'sleep_time': 0, 'parameter': {'volume': {'size': 1, 'name': '${volume_name}$'}}, 'file': False, 'check': [{'check_type': 'only_check_status', 'datebase': None, 'expected_code': 202, 'expected_request': {}}], 'relevance': None}"}], "start": 1572790408742, "stop": 1572790408960, "uuid": "1756004d-8fd7-4aca-b977-73f5ffdf6efd", "historyId": "26d0c42eae7e6264ecd8510772f377d7", "testCaseId": "306514f8390cc2e006e7e7ee151a9e9e", "fullName": "testcase.test_15_delete_volume.Test_Delete_volume#test_delete_volume", "labels": [{"name": "feature", "value": "删除卷"}, {"name": "story", "value": "卷"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_15_delete_volume"}, {"name": "subSuite", "value": "Test_Delete_volume"}, {"name": "host", "value": "wuzs"}, {"name": "thread", "value": "15736-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_15_delete_volume"}]}