{"name": "test_volume_snap_delete[case_data1]", "status": "failed", "statusDetails": {"message": "AssertionError: http状态码错误！\n 200 != 404", "trace": "self = <testcase.test_10_delete_volume_snap.Test_Volume_Snap_Delete object at 0x053CB690>\ncase_data = {'address': '/v2/${project_id}$/snapshots/${volume_snapshot_id}$', 'check': [{'check_type': 'only_check_status', 'date...file': False, 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': '18f325b2c738416692dd847db79cb514'}, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"])\n    @allure.story(\"删除卷快照\")\n    @pytest.mark.flaky(reruns=3)\n    def test_volume_snap_delete(self,case_data):\n    \n        for k, v in enumerate(case_dict[\"test_case\"]):  # 遍历用例文件中所有用例的索引和值\n            try:\n                if case_data == v:\n                    # 修改方法的__doc__在下一次调用时生效，此为展示在报告中的用例描述\n                    Test_Volume_Snap_Delete.test_volume_snap_delete.__doc__ = case_dict[\"test_case\"][k + 1][\"info\"]\n            except IndexError:\n                pass\n    \n        if not self.result[\"result\"]:\n            # 查看类变量result的值，如果未False，则前一接口校验错误，此接口标记未失败，节约测试时间\n            pytest.xfail(\"前置接口测试失败，此接口标记为失败\")\n    \n        #设置延时，等待快照删除完成\n        if case_data[\"request_type\"] == \"get\":\n            sleep(case_data[\"sleep_time\"])\n    \n        code, data = requestSend.send_request(case_data, case_dict[\"testinfo\"].get(\"host\"),\n                                              case_dict[\"testinfo\"].get(\"address\"),str(case_dict[\"testinfo\"].get(\"port\")), self.relevance, CASE_PATH, self.result)\n    \n        #结果校验\n        CheckResult.check(case_data[\"test_name\"], case_data[\"check\"][0], code, data, self.relevance, CASE_PATH,\n>                         self.result)\n\ntestcase\\test_10_delete_volume_snap.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntest_name = '删除卷快照后查看询'\ncase_data = {'check_type': 'only_check_status', 'datebase': None, 'expected_code': 404, 'expected_request': {}}\ncode = 200\ndata = {'snapshot': {'created_at': '2019-11-03T14:08:20.000000', 'description': 'Daily backup', 'id': '38b5852e-c20d-41c8-a623-fac063c92dc2', 'metadata': {}, ...}}\nrelevance = {'admin_id': 'f42a1487dd4e4a6baab6eb65f50f8db0', 'admin_role_id': 'f8d49cf5c0d74f7b85c462219b300f78', 'description': 'api_auto_3jy7svkQdR', 'flavor_id': 'flavor-1-1-1', ...}\n_path = 'H:\\\\api_auto_test\\\\Params\\\\Param', success = {'result': False}\n\n    def check(test_name, case_data, code, data, relevance, _path, success):\n        \"\"\"\n        校验测试结果\n        :param test_name:  测试用例\n        :param case_data:  测试用例\n        :param code:  HTTP状态\n        :param data:  返回的接口json数据\n        :param relevance:  关联值对象\n        :param _path:  case路径\n        :param success:  全局测试结果\n        :return:\n        \"\"\"\n        # 不校验\n        if case_data[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n    \n        # 校验json格式\n        elif case_data[\"check_type\"] == 'json':\n            expected_request = case_data[\"expected_request\"]\n            # 判断预期结果格式，如果是字符串，则打开文件路径，提取保存在文件中的期望结果\n            if isinstance(case_data[\"expected_request\"], str):\n                    expected_request = expectedManage.read_json(test_name, expected_request, relevance, _path, success)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(\"期望code\", str(case_data[\"expected_code\"]))\n                allure.attach('期望data', str(expected_request))\n                allure.attach(\"实际code\", str(code))\n                allure.attach('实际data', str(data))\n            if int(code) == case_data[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                # json校验\n                CheckJson.check_json(expected_request, data, success)\n            else:\n                success[\"result\"] = False\n                if case_data.get(\"CustomFail\"):\n                    info = CustomFail.custom_manage(case_data.get(\"CustomFail\"), relevance)\n                    raise failureException(str(info)+\"\\nhttp状态码错误！\\n %s != %s\" % (code, case_data[\"expected_code\"]))\n                else:\n                    raise failureException(\"http状态码错误！\\n %s != %s\" % (code, case_data[\"expected_code\"]))\n    \n        # 只校验HTTP状态\n        elif case_data[\"check_type\"] == 'only_check_status':\n            with allure.step(\"校验HTTP状态\"):\n                allure.attach(\"期望code\", str(case_data[\"expected_code\"]))\n                allure.attach(\"实际code\", str(code))\n            if int(code) == case_data[\"expected_code\"]:\n                pass\n            else:\n                success[\"result\"] = False\n                if case_data.get(\"CustomFail\"):\n                    info = CustomFail.custom_manage(case_data.get(\"CustomFail\"), relevance)\n                    raise failureException(str(info)+\"\\nhttp状态码错误！\\n %s != %s\" % (code, case_data[\"expected_code\"]))\n                else:\n>                   raise failureException(\"http状态码错误！\\n %s != %s\" % (code, case_data[\"expected_code\"]))\nE                   AssertionError: http状态码错误！\nE                    200 != 404\n\nCommon\\CheckResult.py:71: AssertionError"}, "description": "删除卷快照后查看询", "steps": [{"name": "GET请求接口", "status": "passed", "attachments": [{"name": "删除卷快照后查看询", "source": "0ab9f9c6-f9a3-48aa-b8ad-799f37941d69-attachment.attach"}, {"name": "http://192.168.54.103:8776/v2/c9aad29894b84640927e9765b528e0e1/snapshots/38b5852e-c20d-41c8-a623-fac063c92dc2", "source": "9f9159b0-264d-4d6f-b3d7-c3f8411a806c-attachment.attach"}, {"name": "{'Content-Type': 'application/json', 'X-Auth-Token': '18f325b2c738416692dd847db79cb514'}", "source": "e598ba2f-3f36-4ec9-bd8a-0769328ca51c-attachment.attach"}, {"name": "{'volume': {'size': 1}}", "source": "55b95706-21f5-4a12-9428-ee942c1b27bd-attachment.attach"}], "start": 1572790367650, "stop": 1572790367656}, {"name": "校验HTTP状态", "status": "passed", "attachments": [{"name": "404", "source": "34bbe6ff-e32b-4605-972b-67dd68fa667b-attachment.attach"}, {"name": "200", "source": "c51da784-d8ac-4fd8-97b3-4fbd661045d5-attachment.attach"}], "start": 1572790367713, "stop": 1572790367716}], "attachments": [{"name": "log", "source": "f03733b6-5690-4358-8c94-28e031901577-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_data", "value": "{'test_name': '删除卷快照后查看询', 'info': '删除卷快照后查看询', 'http_type': 'http', 'request_type': 'get', 'parameter_type': 'raw', 'address': '/v2/${project_id}$/snapshots/${volume_snapshot_id}$', 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': '18f325b2c738416692dd847db79cb514'}, 'timeout': 20, 'sleep_time': 10, 'parameter': {'volume': {'size': 1}}, 'file': False, 'check': [{'check_type': 'only_check_status', 'datebase': None, 'expected_code': 404, 'expected_request': {}}], 'relevance': None}"}], "start": 1572790357644, "stop": 1572790367716, "uuid": "de034f02-e118-46ce-adef-6e601c7075f8", "historyId": "d296b6c1962d030fd46bb3e7f361476e", "testCaseId": "62650580f505353355b64f6dfabfbd85", "fullName": "testcase.test_10_delete_volume_snap.Test_Volume_Snap_Delete#test_volume_snap_delete", "labels": [{"name": "story", "value": "删除卷快照"}, {"name": "feature", "value": "删除卷快照"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_10_delete_volume_snap"}, {"name": "subSuite", "value": "Test_Volume_Snap_Delete"}, {"name": "host", "value": "wuzs"}, {"name": "thread", "value": "15736-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_10_delete_volume_snap"}]}