{"name": "test_network[case_data0]", "status": "failed", "statusDetails": {"message": "AssertionError: JSON格式校验，关键字 0 不在返回结果 {'status': 'ACTIVE', 'subnets': [], 'name': 'relowxNLZXJdACO6qKhB_netwrok', 'provider:physical_network': 'physnet1', 'admin_state_up': True, 'tenant_id': '6aab179f964d4b94a75aa56a2f281573', 'mtu': 1550, 'router:external': False, 'qos_policy_id': None, 'shared': False, 'port_security_enabled': True, 'provider:network_type': 'vlan', 'id': '8e461104-fc5f-460c-8901-9556bc4c43f8', 'provider:segmentation_id': 251}", "trace": "self = <testcase.test_02_network.Test_Network object at 0x043B2610>\ncase_data = {'address': '/v2.0/networks', 'check': [{'check_type': 'json', 'datebase': None, 'expected_code': 201, 'expected_reque...file': False, 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': '6115e6a4739841c983efd9c59c12d8cb'}, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"])\n    @allure.story(\"测试网络\")\n    \n    def test_network(self,case_data):\n    \n        # 参数化修改test_network注释\n        for k, v in enumerate(case_dict[\"test_case\"]):  # 遍历用例文件中所有用例的索引和值\n            try:\n                if case_data == v:\n                    # 修改方法的__doc__在下一次调用时生效，此为展示在报告中的用例描述\n                    Test_Network.test_network.__doc__ = case_dict[\"test_case\"][k + 1][\"info\"]\n            except IndexError:\n                pass\n    \n        if not self.result[\"result\"]:\n            # 查看类变量result的值，如果未False，则前一接口校验错误，此接口标记未失败，节约测试时间\n            pytest.xfail(\"前置接口测试失败，此接口标记为失败\")\n    \n        #send_request(_data, _host, _address,_port, _relevance, path, _success)\n        code, data = requestSend.send_request(case_data, case_dict[\"testinfo\"].get(\"host\"),\n                                              case_dict[\"testinfo\"].get(\"address\"),str(case_dict[\"testinfo\"].get(\"port\")), self.relevance, CASE_PATH, self.result)\n        expected_code = case_data[\"check\"][0][\"expected_code\"]\n        network_id = data[\"network\"][\"id\"]\n        network_name = data[\"network\"][\"name\"]\n        self.log.debug(\"data:%s\"%data)\n        self.Assert.assert_code(code,expected_code)\n        #保存创建的网络id和网络名称\n        if case_data[\"request_type\"] == \"post\":\n            self.log.info(\"保存network_id到全局配置文件\")\n            conf =Config()\n            conf.set_conf(\"test_data\",\"network_id\",network_id)\n            conf.set_conf(\"test_data\", \"network_name_for_check\", network_name)\n    \n        self.log.debug(\"保存network_name到全局配置文件,用于虚拟校验\")\n    \n>       CheckResult.check(case_data[\"test_name\"], case_data[\"check\"][0], code, data, self.relevance, CASE_PATH, self.result)\n\ntestcase\\test_02_network.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommon\\CheckResult.py:49: in check\n    CheckJson.check_json(expected_request, data, success)\nCommon\\CheckJson.py:42: in check_json\n    check_json(src_data[this_key], dst_data[this_key], success)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc_data = {'admin_state_up': True, 'mtu': 0, 'provider:network_type': 'vlan', 'provider:physical_network': 'physnet1', ...}\ndst_data = {'admin_state_up': True, 'id': '8e461104-fc5f-460c-8901-9556bc4c43f8', 'mtu': 1550, 'name': 'relowxNLZXJdACO6qKhB_netwrok', ...}\nsuccess = {'result': False}\n\n    def check_json(src_data, dst_data, success):\n        \"\"\"\n        校验的json\n        :param src_data:  校验内容\n        :param dst_data:  接口返回的数据（被校验的内容)\n        :param success:  全局测试结果\n        :return:\n        \"\"\"\n        global result\n    \n        if isinstance(src_data, dict):\n            # 若为dict格式\n            for key  in src_data:\n    \n                if key not in dst_data:\n                    success[\"result\"] = False\n                    raise failureException(\"JSON格式校验，关键字 %s 不在返回结果 %s\" % (key, dst_data))\n    \n                elif  type(src_data[key]) is not dict and src_data[key]  != dst_data[key]:\n                    value = src_data[key]\n    \n                    success[\"result\"] = False\n>                   raise failureException(\"JSON格式校验，关键字 %s 不在返回结果 %s\" % (value, dst_data))\nE                   AssertionError: JSON格式校验，关键字 0 不在返回结果 {'status': 'ACTIVE', 'subnets': [], 'name': 'relowxNLZXJdACO6qKhB_netwrok', 'provider:physical_network': 'physnet1', 'admin_state_up': True, 'tenant_id': '6aab179f964d4b94a75aa56a2f281573', 'mtu': 1550, 'router:external': False, 'qos_policy_id': None, 'shared': False, 'port_security_enabled': True, 'provider:network_type': 'vlan', 'id': '8e461104-fc5f-460c-8901-9556bc4c43f8', 'provider:segmentation_id': 251}\n\nCommon\\CheckJson.py:36: AssertionError"}, "steps": [{"name": "POST请求接口", "status": "passed", "attachments": [{"name": "创建网络", "source": "4baff9ba-4f4b-46a3-b43b-c1e2af53cc61-attachment.attach"}, {"name": "http://192.168.54.103:9696/v2.0/networks", "source": "67e511fa-01b8-4fdc-8802-24ca6be12267-attachment.attach"}, {"name": "{'Content-Type': 'application/json', 'X-Auth-Token': '6115e6a4739841c983efd9c59c12d8cb'}", "source": "72af0b59-c8ae-4cd1-a8c7-daf9aea59aac-attachment.attach"}, {"name": "{'network': {'admin_state_up': True, 'name': 'relowxNLZXJdACO6qKhB_netwrok', 'tenant_id': '6aab179f964d4b94a75aa56a2f281573'}}", "source": "1c1368f7-7d0c-45c3-bc36-ce53024714b4-attachment.attach"}], "start": 1572789392654, "stop": 1572789392658}, {"name": "JSON格式校验", "status": "passed", "attachments": [{"name": "201", "source": "5297516b-6efb-4823-bf71-dd12d4be4dd6-attachment.attach"}, {"name": "{'network': {'status': 'ACTIVE', 'subnets': [], 'provider:physical_network': 'physnet1', 'admin_state_up': True, 'mtu': 0, 'router:external': False, 'qos_policy_id': None, 'shared': False, 'provider:network_type': 'vlan'}}", "source": "1e1154e0-4b1d-439b-9d8c-5d163bfd9114-attachment.attach"}, {"name": "201", "source": "12a0b71f-3b24-49e5-aacf-5c2703b3e559-attachment.attach"}, {"name": "{'network': {'status': 'ACTIVE', 'subnets': [], 'name': 'relowxNLZXJdACO6qKhB_netwrok', 'provider:physical_network': 'physnet1', 'admin_state_up': True, 'tenant_id': '6aab179f964d4b94a75aa56a2f281573', 'mtu': 1550, 'router:external': False, 'qos_policy_id': None, 'shared': False, 'port_security_enabled': True, 'provider:network_type': 'vlan', 'id': '8e461104-fc5f-460c-8901-9556bc4c43f8', 'provider:segmentation_id': 251}}", "source": "54a830c8-75f6-49e7-975e-8dc22bcf6445-attachment.attach"}], "start": 1572789394928, "stop": 1572789394932}], "attachments": [{"name": "log", "source": "84ba07a9-baaf-4e05-9624-af9c789ce82a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_data", "value": "{'test_name': '创建网络', 'info': '创建网络', 'http_type': 'http', 'request_type': 'post', 'parameter_type': 'raw', 'address': '/v2.0/networks', 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': '${token_id}$'}, 'timeout': 20, 'parameter': {'network': {'admin_state_up': True, 'name': '${network_name}$', 'tenant_id': '${project_id}$'}}, 'file': False, 'check': [{'check_type': 'json', 'datebase': None, 'expected_code': 201, 'expected_request': 'network_result.json'}], 'relevance': None}"}], "start": 1572789392649, "stop": 1572789394932, "uuid": "9da0679d-ec70-4de0-9fc3-0e2205819ad9", "historyId": "78788b0cabfdddef6ea90d61bf82fc35", "testCaseId": "234bb5f25273da7f7309078bc58cc680", "fullName": "testcase.test_02_network.Test_Network#test_network", "labels": [{"name": "story", "value": "测试网络"}, {"name": "feature", "value": "创建网络"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_02_network"}, {"name": "subSuite", "value": "Test_Network"}, {"name": "host", "value": "wuzs"}, {"name": "thread", "value": "13404-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_02_network"}]}