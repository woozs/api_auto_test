{
  "uid" : "4726144b23ebd36f",
  "name" : "test_network[case_data0]",
  "fullName" : "testcase.test_02_network.Test_Network#test_network",
  "historyId" : "78788b0cabfdddef6ea90d61bf82fc35",
  "time" : {
    "start" : 1572789392649,
    "stop" : 1572789394932,
    "duration" : 2283
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: JSON格式校验，关键字 0 不在返回结果 {'status': 'ACTIVE', 'subnets': [], 'name': 'relowxNLZXJdACO6qKhB_netwrok', 'provider:physical_network': 'physnet1', 'admin_state_up': True, 'tenant_id': '6aab179f964d4b94a75aa56a2f281573', 'mtu': 1550, 'router:external': False, 'qos_policy_id': None, 'shared': False, 'port_security_enabled': True, 'provider:network_type': 'vlan', 'id': '8e461104-fc5f-460c-8901-9556bc4c43f8', 'provider:segmentation_id': 251}",
  "statusTrace" : "self = <testcase.test_02_network.Test_Network object at 0x043B2610>\ncase_data = {'address': '/v2.0/networks', 'check': [{'check_type': 'json', 'datebase': None, 'expected_code': 201, 'expected_reque...file': False, 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': '6115e6a4739841c983efd9c59c12d8cb'}, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"])\n    @allure.story(\"测试网络\")\n    \n    def test_network(self,case_data):\n    \n        # 参数化修改test_network注释\n        for k, v in enumerate(case_dict[\"test_case\"]):  # 遍历用例文件中所有用例的索引和值\n            try:\n                if case_data == v:\n                    # 修改方法的__doc__在下一次调用时生效，此为展示在报告中的用例描述\n                    Test_Network.test_network.__doc__ = case_dict[\"test_case\"][k + 1][\"info\"]\n            except IndexError:\n                pass\n    \n        if not self.result[\"result\"]:\n            # 查看类变量result的值，如果未False，则前一接口校验错误，此接口标记未失败，节约测试时间\n            pytest.xfail(\"前置接口测试失败，此接口标记为失败\")\n    \n        #send_request(_data, _host, _address,_port, _relevance, path, _success)\n        code, data = requestSend.send_request(case_data, case_dict[\"testinfo\"].get(\"host\"),\n                                              case_dict[\"testinfo\"].get(\"address\"),str(case_dict[\"testinfo\"].get(\"port\")), self.relevance, CASE_PATH, self.result)\n        expected_code = case_data[\"check\"][0][\"expected_code\"]\n        network_id = data[\"network\"][\"id\"]\n        network_name = data[\"network\"][\"name\"]\n        self.log.debug(\"data:%s\"%data)\n        self.Assert.assert_code(code,expected_code)\n        #保存创建的网络id和网络名称\n        if case_data[\"request_type\"] == \"post\":\n            self.log.info(\"保存network_id到全局配置文件\")\n            conf =Config()\n            conf.set_conf(\"test_data\",\"network_id\",network_id)\n            conf.set_conf(\"test_data\", \"network_name_for_check\", network_name)\n    \n        self.log.debug(\"保存network_name到全局配置文件,用于虚拟校验\")\n    \n>       CheckResult.check(case_data[\"test_name\"], case_data[\"check\"][0], code, data, self.relevance, CASE_PATH, self.result)\n\ntestcase\\test_02_network.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommon\\CheckResult.py:49: in check\n    CheckJson.check_json(expected_request, data, success)\nCommon\\CheckJson.py:42: in check_json\n    check_json(src_data[this_key], dst_data[this_key], success)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc_data = {'admin_state_up': True, 'mtu': 0, 'provider:network_type': 'vlan', 'provider:physical_network': 'physnet1', ...}\ndst_data = {'admin_state_up': True, 'id': '8e461104-fc5f-460c-8901-9556bc4c43f8', 'mtu': 1550, 'name': 'relowxNLZXJdACO6qKhB_netwrok', ...}\nsuccess = {'result': False}\n\n    def check_json(src_data, dst_data, success):\n        \"\"\"\n        校验的json\n        :param src_data:  校验内容\n        :param dst_data:  接口返回的数据（被校验的内容)\n        :param success:  全局测试结果\n        :return:\n        \"\"\"\n        global result\n    \n        if isinstance(src_data, dict):\n            # 若为dict格式\n            for key  in src_data:\n    \n                if key not in dst_data:\n                    success[\"result\"] = False\n                    raise failureException(\"JSON格式校验，关键字 %s 不在返回结果 %s\" % (key, dst_data))\n    \n                elif  type(src_data[key]) is not dict and src_data[key]  != dst_data[key]:\n                    value = src_data[key]\n    \n                    success[\"result\"] = False\n>                   raise failureException(\"JSON格式校验，关键字 %s 不在返回结果 %s\" % (value, dst_data))\nE                   AssertionError: JSON格式校验，关键字 0 不在返回结果 {'status': 'ACTIVE', 'subnets': [], 'name': 'relowxNLZXJdACO6qKhB_netwrok', 'provider:physical_network': 'physnet1', 'admin_state_up': True, 'tenant_id': '6aab179f964d4b94a75aa56a2f281573', 'mtu': 1550, 'router:external': False, 'qos_policy_id': None, 'shared': False, 'port_security_enabled': True, 'provider:network_type': 'vlan', 'id': '8e461104-fc5f-460c-8901-9556bc4c43f8', 'provider:segmentation_id': 251}\n\nCommon\\CheckJson.py:36: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1572789392429,
      "stop" : 1572789392643,
      "duration" : 214
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: JSON格式校验，关键字 0 不在返回结果 {'status': 'ACTIVE', 'subnets': [], 'name': 'relowxNLZXJdACO6qKhB_netwrok', 'provider:physical_network': 'physnet1', 'admin_state_up': True, 'tenant_id': '6aab179f964d4b94a75aa56a2f281573', 'mtu': 1550, 'router:external': False, 'qos_policy_id': None, 'shared': False, 'port_security_enabled': True, 'provider:network_type': 'vlan', 'id': '8e461104-fc5f-460c-8901-9556bc4c43f8', 'provider:segmentation_id': 251}",
    "statusTrace" : "self = <testcase.test_02_network.Test_Network object at 0x043B2610>\ncase_data = {'address': '/v2.0/networks', 'check': [{'check_type': 'json', 'datebase': None, 'expected_code': 201, 'expected_reque...file': False, 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': '6115e6a4739841c983efd9c59c12d8cb'}, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"])\n    @allure.story(\"测试网络\")\n    \n    def test_network(self,case_data):\n    \n        # 参数化修改test_network注释\n        for k, v in enumerate(case_dict[\"test_case\"]):  # 遍历用例文件中所有用例的索引和值\n            try:\n                if case_data == v:\n                    # 修改方法的__doc__在下一次调用时生效，此为展示在报告中的用例描述\n                    Test_Network.test_network.__doc__ = case_dict[\"test_case\"][k + 1][\"info\"]\n            except IndexError:\n                pass\n    \n        if not self.result[\"result\"]:\n            # 查看类变量result的值，如果未False，则前一接口校验错误，此接口标记未失败，节约测试时间\n            pytest.xfail(\"前置接口测试失败，此接口标记为失败\")\n    \n        #send_request(_data, _host, _address,_port, _relevance, path, _success)\n        code, data = requestSend.send_request(case_data, case_dict[\"testinfo\"].get(\"host\"),\n                                              case_dict[\"testinfo\"].get(\"address\"),str(case_dict[\"testinfo\"].get(\"port\")), self.relevance, CASE_PATH, self.result)\n        expected_code = case_data[\"check\"][0][\"expected_code\"]\n        network_id = data[\"network\"][\"id\"]\n        network_name = data[\"network\"][\"name\"]\n        self.log.debug(\"data:%s\"%data)\n        self.Assert.assert_code(code,expected_code)\n        #保存创建的网络id和网络名称\n        if case_data[\"request_type\"] == \"post\":\n            self.log.info(\"保存network_id到全局配置文件\")\n            conf =Config()\n            conf.set_conf(\"test_data\",\"network_id\",network_id)\n            conf.set_conf(\"test_data\", \"network_name_for_check\", network_name)\n    \n        self.log.debug(\"保存network_name到全局配置文件,用于虚拟校验\")\n    \n>       CheckResult.check(case_data[\"test_name\"], case_data[\"check\"][0], code, data, self.relevance, CASE_PATH, self.result)\n\ntestcase\\test_02_network.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommon\\CheckResult.py:49: in check\n    CheckJson.check_json(expected_request, data, success)\nCommon\\CheckJson.py:42: in check_json\n    check_json(src_data[this_key], dst_data[this_key], success)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc_data = {'admin_state_up': True, 'mtu': 0, 'provider:network_type': 'vlan', 'provider:physical_network': 'physnet1', ...}\ndst_data = {'admin_state_up': True, 'id': '8e461104-fc5f-460c-8901-9556bc4c43f8', 'mtu': 1550, 'name': 'relowxNLZXJdACO6qKhB_netwrok', ...}\nsuccess = {'result': False}\n\n    def check_json(src_data, dst_data, success):\n        \"\"\"\n        校验的json\n        :param src_data:  校验内容\n        :param dst_data:  接口返回的数据（被校验的内容)\n        :param success:  全局测试结果\n        :return:\n        \"\"\"\n        global result\n    \n        if isinstance(src_data, dict):\n            # 若为dict格式\n            for key  in src_data:\n    \n                if key not in dst_data:\n                    success[\"result\"] = False\n                    raise failureException(\"JSON格式校验，关键字 %s 不在返回结果 %s\" % (key, dst_data))\n    \n                elif  type(src_data[key]) is not dict and src_data[key]  != dst_data[key]:\n                    value = src_data[key]\n    \n                    success[\"result\"] = False\n>                   raise failureException(\"JSON格式校验，关键字 %s 不在返回结果 %s\" % (value, dst_data))\nE                   AssertionError: JSON格式校验，关键字 0 不在返回结果 {'status': 'ACTIVE', 'subnets': [], 'name': 'relowxNLZXJdACO6qKhB_netwrok', 'provider:physical_network': 'physnet1', 'admin_state_up': True, 'tenant_id': '6aab179f964d4b94a75aa56a2f281573', 'mtu': 1550, 'router:external': False, 'qos_policy_id': None, 'shared': False, 'port_security_enabled': True, 'provider:network_type': 'vlan', 'id': '8e461104-fc5f-460c-8901-9556bc4c43f8', 'provider:segmentation_id': 251}\n\nCommon\\CheckJson.py:36: AssertionError",
    "steps" : [ {
      "name" : "POST请求接口",
      "time" : {
        "start" : 1572789392654,
        "stop" : 1572789392658,
        "duration" : 4
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "42ce63943488eab6",
        "name" : "创建网络",
        "source" : "42ce63943488eab6.attach",
        "type" : "text/plain",
        "size" : 15
      }, {
        "uid" : "e723483ddd79ad48",
        "name" : "http://192.168.54.103:9696/v2.0/networks",
        "source" : "e723483ddd79ad48.attach",
        "type" : "text/plain",
        "size" : 12
      }, {
        "uid" : "6fe96fa6b49993c0",
        "name" : "{'Content-Type': 'application/json', 'X-Auth-Token': '6115e6a4739841c983efd9c59c12d8cb'}",
        "source" : "6fe96fa6b49993c0.attach",
        "type" : "text/plain",
        "size" : 9
      }, {
        "uid" : "8e048372dada4514",
        "name" : "{'network': {'admin_state_up': True, 'name': 'relowxNLZXJdACO6qKhB_netwrok', 'tenant_id': '6aab179f964d4b94a75aa56a2f281573'}}",
        "source" : "8e048372dada4514.attach",
        "type" : "text/plain",
        "size" : 12
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 4,
      "shouldDisplayMessage" : false
    }, {
      "name" : "JSON格式校验",
      "time" : {
        "start" : 1572789394928,
        "stop" : 1572789394932,
        "duration" : 4
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "6475abf70c5b2c89",
        "name" : "201",
        "source" : "6475abf70c5b2c89.attach",
        "type" : "text/plain",
        "size" : 10
      }, {
        "uid" : "d5802451d83a47c9",
        "name" : "{'network': {'status': 'ACTIVE', 'subnets': [], 'provider:physical_network': 'physnet1', 'admin_state_up': True, 'mtu': 0, 'router:external': False, 'qos_policy_id': None, 'shared': False, 'provider:network_type': 'vlan'}}",
        "source" : "d5802451d83a47c9.attach",
        "type" : "text/plain",
        "size" : 10
      }, {
        "uid" : "9effa6b322d46b3a",
        "name" : "201",
        "source" : "9effa6b322d46b3a.attach",
        "type" : "text/plain",
        "size" : 10
      }, {
        "uid" : "3f60ab483e2717a2",
        "name" : "{'network': {'status': 'ACTIVE', 'subnets': [], 'name': 'relowxNLZXJdACO6qKhB_netwrok', 'provider:physical_network': 'physnet1', 'admin_state_up': True, 'tenant_id': '6aab179f964d4b94a75aa56a2f281573', 'mtu': 1550, 'router:external': False, 'qos_policy_id': None, 'shared': False, 'port_security_enabled': True, 'provider:network_type': 'vlan', 'id': '8e461104-fc5f-460c-8901-9556bc4c43f8', 'provider:segmentation_id': 251}}",
        "source" : "3f60ab483e2717a2.attach",
        "type" : "text/plain",
        "size" : 10
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 4,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "b51c0c660e0c5505",
      "name" : "log",
      "source" : "b51c0c660e0c5505.txt",
      "type" : "text/plain",
      "size" : 6520
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "hasContent" : true,
    "attachmentsCount" : 9,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1572789395059,
      "stop" : 1572789395059,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "测试网络"
  }, {
    "name" : "feature",
    "value" : "创建网络"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_02_network"
  }, {
    "name" : "subSuite",
    "value" : "Test_Network"
  }, {
    "name" : "host",
    "value" : "wuzs"
  }, {
    "name" : "thread",
    "value" : "13404-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_02_network"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_data",
    "value" : "{'test_name': '创建网络', 'info': '创建网络', 'http_type': 'http', 'request_type': 'post', 'parameter_type': 'raw', 'address': '/v2.0/networks', 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': '${token_id}$'}, 'timeout': 20, 'parameter': {'network': {'admin_state_up': True, 'name': '${network_name}$', 'tenant_id': '${project_id}$'}}, 'file': False, 'check': [{'check_type': 'json', 'datebase': None, 'expected_code': 201, 'expected_request': 'network_result.json'}], 'relevance': None}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "4726144b23ebd36f.json",
  "parameterValues" : [ "{'test_name': '创建网络', 'info': '创建网络', 'http_type': 'http', 'request_type': 'post', 'parameter_type': 'raw', 'address': '/v2.0/networks', 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': '${token_id}$'}, 'timeout': 20, 'parameter': {'network': {'admin_state_up': True, 'name': '${network_name}$', 'tenant_id': '${project_id}$'}}, 'file': False, 'check': [{'check_type': 'json', 'datebase': None, 'expected_code': 201, 'expected_request': 'network_result.json'}], 'relevance': None}" ]
}