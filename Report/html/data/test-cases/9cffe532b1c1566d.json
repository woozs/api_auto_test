{
  "uid" : "9cffe532b1c1566d",
  "name" : "test_subnet[case_data0]",
  "fullName" : "testcase.test_03_subnet.Test_Subnet#test_subnet",
  "historyId" : "f11031fa706d86107d87278ba51e3487",
  "time" : {
    "start" : 1572784101214,
    "stop" : 1572784101480,
    "duration" : 266
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: JSON格式校验，关键字 192.168.234.0/24 不在返回结果 {'name': 'nCGN9HsSaRcMDkju23FO_subnet', 'enable_dhcp': True, 'network_id': 'e230d4e4-3cad-4388-9530-6121c7ff8d12', 'tenant_id': '72695eb0907c49a8bdc61419202f93f0', 'dns_nameservers': [], 'gateway_ip': '192.168.224.1', 'ipv6_ra_mode': None, 'allocation_pools': [{'start': '192.168.224.2', 'end': '192.168.224.254'}], 'host_routes': [], 'ip_version': 4, 'ipv6_address_mode': None, 'cidr': '192.168.224.0/24', 'id': 'd4dacc66-ae0f-4b86-87a2-ede584a80d3b', 'subnetpool_id': None}",
  "statusTrace" : "self = <testcase.test_03_subnet.Test_Subnet object at 0x04A9AD30>\ncase_data = {'address': '/v2.0/subnets', 'check': [{'check_type': 'json', 'datebase': None, 'expected_code': 201, 'expected_reques...file': False, 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': 'c08e4df48d104d1395843231f82e6751'}, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"])\n    @allure.story(\"子网\")\n    # @pytest.mark.scenarios_3(1)\n    def test_subnet(self,case_data):\n    \n        # 参数化修改test_subnet注释\n        for k, v in enumerate(case_dict[\"test_case\"]):  # 遍历用例文件中所有用例的索引和值\n            try:\n                if case_data == v:\n                    # 修改方法的__doc__在下一次调用时生效，此为展示在报告中的用例描述\n                    Test_Subnet.test_subnet.__doc__ = case_dict[\"test_case\"][k + 1][\"info\"]\n            except IndexError:\n                pass\n    \n        if not self.result[\"result\"]:\n            # 查看类变量result的值，如果未False，则前一接口校验错误，此接口标记未失败，节约测试时间\n            pytest.xfail(\"前置接口测试失败，此接口标记为失败\")\n    \n        #send_request(_data, _host, _address,_port, _relevance, path, _success)\n        code, data = requestSend.send_request(case_data, case_dict[\"testinfo\"].get(\"host\"),\n                                              case_dict[\"testinfo\"].get(\"address\"),str(case_dict[\"testinfo\"].get(\"port\")), self.relevance, CASE_PATH, self.result)\n        expected_code = case_data[\"check\"][0][\"expected_code\"]\n        subnet_id = data[\"subnet\"][\"id\"]\n        self.Assert.assert_code(code,expected_code)\n        self.log.info(\"保存subnet_id到全局配置文件\")\n        conf =Config()\n        conf.set_conf(\"test_data\",\"subnet_id\",subnet_id)\n        CheckResult.check(case_data[\"test_name\"], case_data[\"check\"][0], code, data, self.relevance, CASE_PATH,\n>                         self.result)\n\ntestcase\\test_03_subnet.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommon\\CheckResult.py:49: in check\n    CheckJson.check_json(expected_request, data, success)\nCommon\\CheckJson.py:42: in check_json\n    check_json(src_data[this_key], dst_data[this_key], success)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc_data = {'cidr': '192.168.234.0/24', 'enable_dhcp': True, 'gateway_ip': '192.168.234.1', 'ip_version': 4, ...}\ndst_data = {'allocation_pools': [{'end': '192.168.224.254', 'start': '192.168.224.2'}], 'cidr': '192.168.224.0/24', 'dns_nameservers': [], 'enable_dhcp': True, ...}\nsuccess = {'result': False}\n\n    def check_json(src_data, dst_data, success):\n        \"\"\"\n        校验的json\n        :param src_data:  校验内容\n        :param dst_data:  接口返回的数据（被校验的内容)\n        :param success:  全局测试结果\n        :return:\n        \"\"\"\n        global result\n    \n        if isinstance(src_data, dict):\n            # 若为dict格式\n            for key  in src_data:\n    \n                if key not in dst_data:\n                    success[\"result\"] = False\n                    raise failureException(\"JSON格式校验，关键字 %s 不在返回结果 %s\" % (key, dst_data))\n    \n                elif  type(src_data[key]) is not dict and src_data[key]  != dst_data[key]:\n                    value = src_data[key]\n    \n                    success[\"result\"] = False\n>                   raise failureException(\"JSON格式校验，关键字 %s 不在返回结果 %s\" % (value, dst_data))\nE                   AssertionError: JSON格式校验，关键字 192.168.234.0/24 不在返回结果 {'name': 'nCGN9HsSaRcMDkju23FO_subnet', 'enable_dhcp': True, 'network_id': 'e230d4e4-3cad-4388-9530-6121c7ff8d12', 'tenant_id': '72695eb0907c49a8bdc61419202f93f0', 'dns_nameservers': [], 'gateway_ip': '192.168.224.1', 'ipv6_ra_mode': None, 'allocation_pools': [{'start': '192.168.224.2', 'end': '192.168.224.254'}], 'host_routes': [], 'ip_version': 4, 'ipv6_address_mode': None, 'cidr': '192.168.224.0/24', 'id': 'd4dacc66-ae0f-4b86-87a2-ede584a80d3b', 'subnetpool_id': None}\n\nCommon\\CheckJson.py:36: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1572784100992,
      "stop" : 1572784101210,
      "duration" : 218
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: JSON格式校验，关键字 192.168.234.0/24 不在返回结果 {'name': 'nCGN9HsSaRcMDkju23FO_subnet', 'enable_dhcp': True, 'network_id': 'e230d4e4-3cad-4388-9530-6121c7ff8d12', 'tenant_id': '72695eb0907c49a8bdc61419202f93f0', 'dns_nameservers': [], 'gateway_ip': '192.168.224.1', 'ipv6_ra_mode': None, 'allocation_pools': [{'start': '192.168.224.2', 'end': '192.168.224.254'}], 'host_routes': [], 'ip_version': 4, 'ipv6_address_mode': None, 'cidr': '192.168.224.0/24', 'id': 'd4dacc66-ae0f-4b86-87a2-ede584a80d3b', 'subnetpool_id': None}",
    "statusTrace" : "self = <testcase.test_03_subnet.Test_Subnet object at 0x04A9AD30>\ncase_data = {'address': '/v2.0/subnets', 'check': [{'check_type': 'json', 'datebase': None, 'expected_code': 201, 'expected_reques...file': False, 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': 'c08e4df48d104d1395843231f82e6751'}, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"])\n    @allure.story(\"子网\")\n    # @pytest.mark.scenarios_3(1)\n    def test_subnet(self,case_data):\n    \n        # 参数化修改test_subnet注释\n        for k, v in enumerate(case_dict[\"test_case\"]):  # 遍历用例文件中所有用例的索引和值\n            try:\n                if case_data == v:\n                    # 修改方法的__doc__在下一次调用时生效，此为展示在报告中的用例描述\n                    Test_Subnet.test_subnet.__doc__ = case_dict[\"test_case\"][k + 1][\"info\"]\n            except IndexError:\n                pass\n    \n        if not self.result[\"result\"]:\n            # 查看类变量result的值，如果未False，则前一接口校验错误，此接口标记未失败，节约测试时间\n            pytest.xfail(\"前置接口测试失败，此接口标记为失败\")\n    \n        #send_request(_data, _host, _address,_port, _relevance, path, _success)\n        code, data = requestSend.send_request(case_data, case_dict[\"testinfo\"].get(\"host\"),\n                                              case_dict[\"testinfo\"].get(\"address\"),str(case_dict[\"testinfo\"].get(\"port\")), self.relevance, CASE_PATH, self.result)\n        expected_code = case_data[\"check\"][0][\"expected_code\"]\n        subnet_id = data[\"subnet\"][\"id\"]\n        self.Assert.assert_code(code,expected_code)\n        self.log.info(\"保存subnet_id到全局配置文件\")\n        conf =Config()\n        conf.set_conf(\"test_data\",\"subnet_id\",subnet_id)\n        CheckResult.check(case_data[\"test_name\"], case_data[\"check\"][0], code, data, self.relevance, CASE_PATH,\n>                         self.result)\n\ntestcase\\test_03_subnet.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommon\\CheckResult.py:49: in check\n    CheckJson.check_json(expected_request, data, success)\nCommon\\CheckJson.py:42: in check_json\n    check_json(src_data[this_key], dst_data[this_key], success)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc_data = {'cidr': '192.168.234.0/24', 'enable_dhcp': True, 'gateway_ip': '192.168.234.1', 'ip_version': 4, ...}\ndst_data = {'allocation_pools': [{'end': '192.168.224.254', 'start': '192.168.224.2'}], 'cidr': '192.168.224.0/24', 'dns_nameservers': [], 'enable_dhcp': True, ...}\nsuccess = {'result': False}\n\n    def check_json(src_data, dst_data, success):\n        \"\"\"\n        校验的json\n        :param src_data:  校验内容\n        :param dst_data:  接口返回的数据（被校验的内容)\n        :param success:  全局测试结果\n        :return:\n        \"\"\"\n        global result\n    \n        if isinstance(src_data, dict):\n            # 若为dict格式\n            for key  in src_data:\n    \n                if key not in dst_data:\n                    success[\"result\"] = False\n                    raise failureException(\"JSON格式校验，关键字 %s 不在返回结果 %s\" % (key, dst_data))\n    \n                elif  type(src_data[key]) is not dict and src_data[key]  != dst_data[key]:\n                    value = src_data[key]\n    \n                    success[\"result\"] = False\n>                   raise failureException(\"JSON格式校验，关键字 %s 不在返回结果 %s\" % (value, dst_data))\nE                   AssertionError: JSON格式校验，关键字 192.168.234.0/24 不在返回结果 {'name': 'nCGN9HsSaRcMDkju23FO_subnet', 'enable_dhcp': True, 'network_id': 'e230d4e4-3cad-4388-9530-6121c7ff8d12', 'tenant_id': '72695eb0907c49a8bdc61419202f93f0', 'dns_nameservers': [], 'gateway_ip': '192.168.224.1', 'ipv6_ra_mode': None, 'allocation_pools': [{'start': '192.168.224.2', 'end': '192.168.224.254'}], 'host_routes': [], 'ip_version': 4, 'ipv6_address_mode': None, 'cidr': '192.168.224.0/24', 'id': 'd4dacc66-ae0f-4b86-87a2-ede584a80d3b', 'subnetpool_id': None}\n\nCommon\\CheckJson.py:36: AssertionError",
    "steps" : [ {
      "name" : "POST请求接口",
      "time" : {
        "start" : 1572784101216,
        "stop" : 1572784101218,
        "duration" : 2
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "73f597b9a84c102e",
        "name" : "创建子网",
        "source" : "73f597b9a84c102e.attach",
        "type" : "text/plain",
        "size" : 15
      }, {
        "uid" : "3ca2c6edf366a9ac",
        "name" : "http://192.168.54.120:9696/v2.0/subnets",
        "source" : "3ca2c6edf366a9ac.attach",
        "type" : "text/plain",
        "size" : 12
      }, {
        "uid" : "e428cab0f69edc2a",
        "name" : "{'Content-Type': 'application/json', 'X-Auth-Token': 'c08e4df48d104d1395843231f82e6751'}",
        "source" : "e428cab0f69edc2a.attach",
        "type" : "text/plain",
        "size" : 9
      }, {
        "uid" : "7bcf5221d5102826",
        "name" : "{'subnet': {'network_id': 'e230d4e4-3cad-4388-9530-6121c7ff8d12', 'ip_version': 4, 'name': 'nCGN9HsSaRcMDkju23FO_subnet', 'tenant_id': '72695eb0907c49a8bdc61419202f93f0', 'cidr': '192.168.224.0/24', 'gateway_ip': '192.168.224.1', 'enable_dhcp': True}}",
        "source" : "7bcf5221d5102826.attach",
        "type" : "text/plain",
        "size" : 12
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 4,
      "shouldDisplayMessage" : false
    }, {
      "name" : "JSON格式校验",
      "time" : {
        "start" : 1572784101476,
        "stop" : 1572784101480,
        "duration" : 4
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "c3d4ecf57c17a71a",
        "name" : "201",
        "source" : "c3d4ecf57c17a71a.attach",
        "type" : "text/plain",
        "size" : 10
      }, {
        "uid" : "86fc6175d2bbca71",
        "name" : "{'subnet': {'enable_dhcp': True, 'cidr': '192.168.234.0/24', 'tenant_id': '72695eb0907c49a8bdc61419202f93f0', 'gateway_ip': '192.168.234.1', 'network_id': 'e230d4e4-3cad-4388-9530-6121c7ff8d12', 'ip_version': 4}}",
        "source" : "86fc6175d2bbca71.attach",
        "type" : "text/plain",
        "size" : 10
      }, {
        "uid" : "8b97c3a43e07b7eb",
        "name" : "201",
        "source" : "8b97c3a43e07b7eb.attach",
        "type" : "text/plain",
        "size" : 10
      }, {
        "uid" : "19001552005db4fa",
        "name" : "{'subnet': {'name': 'nCGN9HsSaRcMDkju23FO_subnet', 'enable_dhcp': True, 'network_id': 'e230d4e4-3cad-4388-9530-6121c7ff8d12', 'tenant_id': '72695eb0907c49a8bdc61419202f93f0', 'dns_nameservers': [], 'gateway_ip': '192.168.224.1', 'ipv6_ra_mode': None, 'allocation_pools': [{'start': '192.168.224.2', 'end': '192.168.224.254'}], 'host_routes': [], 'ip_version': 4, 'ipv6_address_mode': None, 'cidr': '192.168.224.0/24', 'id': 'd4dacc66-ae0f-4b86-87a2-ede584a80d3b', 'subnetpool_id': None}}",
        "source" : "19001552005db4fa.attach",
        "type" : "text/plain",
        "size" : 10
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 4,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "eef170769ccb87c3",
      "name" : "log",
      "source" : "eef170769ccb87c3.txt",
      "type" : "text/plain",
      "size" : 6115
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "hasContent" : true,
    "attachmentsCount" : 9,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1572784101610,
      "stop" : 1572784101610,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "子网"
  }, {
    "name" : "feature",
    "value" : "创建子网"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_03_subnet"
  }, {
    "name" : "subSuite",
    "value" : "Test_Subnet"
  }, {
    "name" : "host",
    "value" : "wuzs"
  }, {
    "name" : "thread",
    "value" : "15108-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_03_subnet"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_data",
    "value" : "{'test_name': '创建子网', 'info': '创建子网', 'http_type': 'http', 'request_type': 'post', 'parameter_type': 'raw', 'address': '/v2.0/subnets', 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': '${token_id}$'}, 'timeout': 20, 'parameter': {'subnet': {'network_id': '${network_id}$', 'ip_version': 4, 'name': '${subnet_name}$', 'tenant_id': '${project_id}$', 'cidr': '192.168.224.0/24', 'gateway_ip': '192.168.224.1', 'enable_dhcp': True}}, 'file': False, 'check': [{'check_type': 'json', 'datebase': None, 'expected_code': 201, 'expected_request': 'subnet_result.json'}], 'relevance': None}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "9cffe532b1c1566d.json",
  "parameterValues" : [ "{'test_name': '创建子网', 'info': '创建子网', 'http_type': 'http', 'request_type': 'post', 'parameter_type': 'raw', 'address': '/v2.0/subnets', 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': '${token_id}$'}, 'timeout': 20, 'parameter': {'subnet': {'network_id': '${network_id}$', 'ip_version': 4, 'name': '${subnet_name}$', 'tenant_id': '${project_id}$', 'cidr': '192.168.224.0/24', 'gateway_ip': '192.168.224.1', 'enable_dhcp': True}}, 'file': False, 'check': [{'check_type': 'json', 'datebase': None, 'expected_code': 201, 'expected_request': 'subnet_result.json'}], 'relevance': None}" ]
}