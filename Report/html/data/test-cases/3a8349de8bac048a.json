{
  "uid" : "3a8349de8bac048a",
  "name" : "test_os_volume_attachments[case_data0]",
  "fullName" : "testcase.test_06_os_volume_attachments.Test_Os_Volume_Attachments#test_os_volume_attachments",
  "historyId" : "3c7a1c57205bbf23e24338274961ab87",
  "time" : {
    "start" : 1572597137329,
    "stop" : 1572597137556,
    "duration" : 227
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <testcase.test_06_os_volume_attachments.Test_Os_Volume_Attachments object at 0x05775C50>\ncase_data = {'address': '/v2/${project_id}$/servers/${server_id}$/os-volume_attachments', 'check': [{'check_type': 'json', 'dateba...file': False, 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': '7be670ea6db44159acd44b3dae72d132'}, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"])\n    @allure.story(\"虚拟机挂载和卸载\")\n    # @pytest.mark.scenarios_8(1)\n    def test_os_volume_attachments(self,case_data):\n    \n        # 参数化修改test_add_project 注释\n        for k, v in enumerate(case_dict[\"test_case\"]):  # 遍历用例文件中所有用例的索引和值\n            try:\n                if case_data == v:\n                    # 修改方法的__doc__在下一次调用时生效，此为展示在报告中的用例描述\n                    Test_Os_Volume_Attachments.test_os_volume_attachments.__doc__ = case_dict[\"test_case\"][k + 1][\"info\"]\n            except IndexError:\n                pass\n    \n        if not self.result[\"result\"]:\n            # 查看类变量result的值，如果未False，则前一接口校验错误，此接口标记未失败，节约测试时间\n            pytest.xfail(\"前置接口测试失败，此接口标记为失败\")\n    \n        #send_request(_data, _host, _address,_port, _relevance, path, _success)\n        code, data = requestSend.send_request(case_data, case_dict[\"testinfo\"].get(\"host\"),\n                                              case_dict[\"testinfo\"].get(\"address\"),str(case_dict[\"testinfo\"].get(\"port\")), self.relevance, CASE_PATH, self.result)\n        expected_code = case_data[\"check\"][0][\"expected_code\"]\n>       self.Assert.assert_code(code,expected_code)\n\ntestcase\\test_06_os_volume_attachments.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x04EB3690>, code = 409\nexpected_code = 200\n\n    def assert_code(self, code, expected_code):\n        \"\"\"\n        验证response状态码\n        :param code:\n        :param expected_code:\n        :return:\n        \"\"\"\n        try:\n>           assert code == expected_code\nE           AssertionError\n\nCommon\\Assert.py:30: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1572597137119,
      "stop" : 1572597137327,
      "duration" : 208
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <testcase.test_06_os_volume_attachments.Test_Os_Volume_Attachments object at 0x05775C50>\ncase_data = {'address': '/v2/${project_id}$/servers/${server_id}$/os-volume_attachments', 'check': [{'check_type': 'json', 'dateba...file': False, 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': '7be670ea6db44159acd44b3dae72d132'}, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"])\n    @allure.story(\"虚拟机挂载和卸载\")\n    # @pytest.mark.scenarios_8(1)\n    def test_os_volume_attachments(self,case_data):\n    \n        # 参数化修改test_add_project 注释\n        for k, v in enumerate(case_dict[\"test_case\"]):  # 遍历用例文件中所有用例的索引和值\n            try:\n                if case_data == v:\n                    # 修改方法的__doc__在下一次调用时生效，此为展示在报告中的用例描述\n                    Test_Os_Volume_Attachments.test_os_volume_attachments.__doc__ = case_dict[\"test_case\"][k + 1][\"info\"]\n            except IndexError:\n                pass\n    \n        if not self.result[\"result\"]:\n            # 查看类变量result的值，如果未False，则前一接口校验错误，此接口标记未失败，节约测试时间\n            pytest.xfail(\"前置接口测试失败，此接口标记为失败\")\n    \n        #send_request(_data, _host, _address,_port, _relevance, path, _success)\n        code, data = requestSend.send_request(case_data, case_dict[\"testinfo\"].get(\"host\"),\n                                              case_dict[\"testinfo\"].get(\"address\"),str(case_dict[\"testinfo\"].get(\"port\")), self.relevance, CASE_PATH, self.result)\n        expected_code = case_data[\"check\"][0][\"expected_code\"]\n>       self.Assert.assert_code(code,expected_code)\n\ntestcase\\test_06_os_volume_attachments.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x04EB3690>, code = 409\nexpected_code = 200\n\n    def assert_code(self, code, expected_code):\n        \"\"\"\n        验证response状态码\n        :param code:\n        :param expected_code:\n        :return:\n        \"\"\"\n        try:\n>           assert code == expected_code\nE           AssertionError\n\nCommon\\Assert.py:30: AssertionError",
    "steps" : [ {
      "name" : "POST请求接口",
      "time" : {
        "start" : 1572597137331,
        "stop" : 1572597137335,
        "duration" : 4
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "e3d05ac0e548408e",
        "name" : "云主机与磁盘挂载",
        "source" : "e3d05ac0e548408e.attach",
        "type" : "text/plain",
        "size" : 15
      }, {
        "uid" : "4088a08453a9030b",
        "name" : "http://192.168.54.120:8774/v2/e91277c3429141dd81a3073e1f7a10e3/servers/34e17c88-3466-4302-9c0d-13cdcec3d337/os-volume_attachments",
        "source" : "4088a08453a9030b.attach",
        "type" : "text/plain",
        "size" : 12
      }, {
        "uid" : "639551d7d3092482",
        "name" : "{'Content-Type': 'application/json', 'X-Auth-Token': '7be670ea6db44159acd44b3dae72d132'}",
        "source" : "639551d7d3092482.attach",
        "type" : "text/plain",
        "size" : 9
      }, {
        "uid" : "5fb28b9745012acc",
        "name" : "{'volumeAttachment': {'volumeId': '0c12d254-9088-4e17-a54c-22a194d47efc'}}",
        "source" : "5fb28b9745012acc.attach",
        "type" : "text/plain",
        "size" : 12
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 4,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "ff5a0e46074fff6b",
      "name" : "log",
      "source" : "ff5a0e46074fff6b.txt",
      "type" : "text/plain",
      "size" : 5814
    } ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "hasContent" : true,
    "attachmentsCount" : 5,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1572597138197,
      "stop" : 1572597138197,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "虚拟机挂载和卸载"
  }, {
    "name" : "feature",
    "value" : "云主机与磁盘挂载"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_06_os_volume_attachments"
  }, {
    "name" : "subSuite",
    "value" : "Test_Os_Volume_Attachments"
  }, {
    "name" : "host",
    "value" : "wuzs"
  }, {
    "name" : "thread",
    "value" : "1080-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_06_os_volume_attachments"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_data",
    "value" : "{'test_name': '云主机与磁盘挂载', 'info': '云主机与磁盘挂载', 'http_type': 'http', 'request_type': 'post', 'parameter_type': 'raw', 'address': '/v2/${project_id}$/servers/${server_id}$/os-volume_attachments', 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': '${token_id}$'}, 'timeout': 20, 'parameter': {'volumeAttachment': {'volumeId': '${volume_id}$'}}, 'file': False, 'check': [{'check_type': 'json', 'datebase': None, 'expected_code': 200, 'expected_request': {}}], 'relevance': None}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "3a8349de8bac048a.json",
  "parameterValues" : [ "{'test_name': '云主机与磁盘挂载', 'info': '云主机与磁盘挂载', 'http_type': 'http', 'request_type': 'post', 'parameter_type': 'raw', 'address': '/v2/${project_id}$/servers/${server_id}$/os-volume_attachments', 'headers': {'Content-Type': 'application/json', 'X-Auth-Token': '${token_id}$'}, 'timeout': 20, 'parameter': {'volumeAttachment': {'volumeId': '${volume_id}$'}}, 'file': False, 'check': [{'check_type': 'json', 'datebase': None, 'expected_code': 200, 'expected_request': {}}], 'relevance': None}" ]
}